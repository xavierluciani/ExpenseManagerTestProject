// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Expense.Entities.Models;

public partial class DBBContext : DbContext
{
    public DBBContext()
    {
    }

    public DBBContext(DbContextOptions<DBBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Expense> Expenses { get; set; }

    public virtual DbSet<Nature> Natures { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.IdCur);

            entity.ToTable("CURRENCIES");

            entity.Property(e => e.IdCur).HasColumnName("ID_CUR");
            entity.Property(e => e.CurCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CUR_CODE");
            entity.Property(e => e.CurName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CUR_NAME");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.IdExp);

            entity.ToTable("EXPENSES");

            entity.HasIndex(e => e.IdNat, "REL_EXP_NAT_FK");

            entity.HasIndex(e => e.IdUsr, "REL_USR_EXP_FK");

            entity.Property(e => e.IdExp).HasColumnName("ID_EXP");
            entity.Property(e => e.ExpAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("EXP_AMOUNT");
            entity.Property(e => e.ExpCommentary)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("EXP_COMMENTARY");
            entity.Property(e => e.ExpDate)
                .HasColumnType("datetime")
                .HasColumnName("EXP_DATE");
            entity.Property(e => e.IdNat).HasColumnName("ID_NAT");
            entity.Property(e => e.IdUsr).HasColumnName("ID_USR");

            entity.HasOne(d => d.Nature).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.IdNat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPENSES_REL_EXP_N_NATURES");

            entity.HasOne(d => d.User).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.IdUsr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPENSES_REL_USR_E_USERS");
        });

        modelBuilder.Entity<Nature>(entity =>
        {
            entity.HasKey(e => e.IdNat);

            entity.ToTable("NATURES");

            entity.Property(e => e.IdNat).HasColumnName("ID_NAT");
            entity.Property(e => e.NatCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAT_CODE");
            entity.Property(e => e.NatName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAT_NAME");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.IdUsr);

            entity.ToTable("USERS");

            entity.HasIndex(e => e.IdCur, "REL_USR_CUR_FK");

            entity.Property(e => e.IdUsr).HasColumnName("ID_USR");
            entity.Property(e => e.IdCur).HasColumnName("ID_CUR");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Surname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SURNAME");

            entity.HasOne(d => d.Currency).WithMany(p => p.Users)
                .HasForeignKey(d => d.IdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_REL_USR_C_CURRENCI");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}